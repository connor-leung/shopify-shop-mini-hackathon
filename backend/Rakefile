require 'sinatra/activerecord/rake'
require 'bundler/setup'

namespace :db do
  desc "Create the database"
  task :create do
    ActiveRecord::Base.establish_connection(
      adapter: 'sqlite3',
      database: 'db/development.sqlite3'
    )
    ActiveRecord::Base.connection.create_database('db/development.sqlite3')
    puts "🎮 Gaming database created successfully!"
  end

  desc "Drop the database"
  task :drop do
    File.delete('db/development.sqlite3') if File.exist?('db/development.sqlite3')
    puts "🗑️  Gaming database dropped successfully!"
  end

  desc "Reset the database (drop, create, migrate, seed)"
  task :reset => [:drop, :create, :migrate, :seed] do
    puts "🔄 Gaming database reset successfully!"
  end

  desc "Seed the database with gaming sample data"
  task :seed do
    load 'db/seeds.rb'
  end
end

namespace :server do
  desc "Start the development server with auto-reload"
  task :start do
    puts "🎮 Starting gaming leaderboard development server..."
    exec "rerun -b 'bundle exec ruby app.rb'"
  end

  desc "Start the production server"
  task :start_prod do
    puts "🚀 Starting gaming leaderboard production server..."
    exec "bundle exec rackup config.ru -p 4567"
  end
end

namespace :gaming do
  desc "Show current leaderboard"
  task :leaderboard do
    require './app'
    puts "🏆 Current Gaming Leaderboard:"
    puts "=" * 50
    
    MOCK_LEADERBOARD.each do |score|
      puts "#{score[:rank].to_s.rjust(2)}. #{score[:username].ljust(20)} | Score: #{score[:total_score].to_s.rjust(5)} | Time: #{score[:time_seconds].to_s.rjust(3)}s | Lives: #{score[:lives_remaining]}"
    end
  end

  desc "Show database scores"
  task :scores do
    require './app'
    puts "📊 Database Scores:"
    puts "=" * 30
    
    Score.includes(:user).order(:total_score).reverse.each do |score|
      puts "#{score.user.username.ljust(20)} | Score: #{score.total_score.to_s.rjust(5)} | Time: #{score.time_seconds.to_s.rjust(3)}s | Lives: #{score.lives_remaining}"
    end
  end

  desc "Test score comparison"
  task :test_score, [:time, :lives, :score] do |task, args|
    require './app'
    
    time = args[:time]&.to_i || 60
    lives = args[:lives]&.to_i || 2
    score = args[:score]&.to_i || 7500
    
    puts "🧪 Testing Score Comparison:"
    puts "Time: #{time}s, Lives: #{lives}, Score: #{score}"
    puts "=" * 40
    
    rank = MOCK_LEADERBOARD.count { |mock| mock[:total_score] > score } + 1
    percentile = ((MOCK_LEADERBOARD.count { |mock| mock[:total_score] < score }.to_f / MOCK_LEADERBOARD.length) * 100).round(1)
    
    puts "Rank: #{rank}/#{MOCK_LEADERBOARD.length + 1}"
    puts "Percentile: #{percentile}%"
    puts "Congratulations: #{generate_congratulation_message(rank)}"
  end
end

# Helper method for gaming tasks
def generate_congratulation_message(rank)
  case rank
  when 1
    "🏆 AMAZING! You're the new champion!"
  when 2..3
    "🥈 Incredible! You're in the top 3!"
  when 4..5
    "🥉 Fantastic! You're in the top 5!"
  when 6..10
    "🎯 Great job! You're in the top 10!"
  else
    "👍 Good effort! Keep practicing to climb the ranks!"
  end
end
